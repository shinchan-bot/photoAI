// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ModelTrainingPendingStatus {
  Pending
  Generated
  Failed
}

model Model {
  id             String                     @id @default(uuid())
  name           String
  type           ModelTypeEnum
  age            Int
  ethnicity      EthnicityEnum
  eyeColor       EyeColorEnum
  bald           Boolean
  userId         String
  triggerWord    String?
  tensorPath     String?
  trainingStatus ModelTrainingPendingStatus @default(Pending)
  outputImages   OutputImages[]
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  falAiRequestId String?
  zipUrl         String
}

model OutputImages {
  id             String                @id @default(uuid())
  imageUrl       String                @default("")
  modelId        String
  userId         String
  prompt         String
  status         OutputImageStatusEnum @default(Pending)
  model          Model                 @relation(fields: [modelId], references: [id])
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  falAiRequestId String?
}

model Packs {
  id      String        @id @default(uuid())
  name    String
  prompts PackPrompts[]
}

model PackPrompts {
  id     String @id @default(uuid())
  prompt String
  packId String
  pack   Packs  @relation(fields: [packId], references: [id])
}

enum OutputImageStatusEnum {
  Pending
  Generated
  Failed
}

enum ModelTypeEnum {
  Man
  Woman
  Others
}

enum EthnicityEnum {
  White
  Black
  AsianAmerican  @map("Asian American")
  EastAsian      @map("East Asian")
  SouthEastAsian @map("South East Asian")
  SouthAsian     @map("South Asian")
  MiddleEastern  @map("Middle Eastern")
  Pacific
  Hispanic
}

enum EyeColorEnum {
  Brown
  Blue
  Hazel
  Gray
}
